import cv2
import numpy as np


net = cv2.dnn.readNet('/home/betul/Downloads/darknet-master/cfg/yolov3.cfg', '/home/betul/Downloads/darknet-master/yolov3.weights')
layer_names = net.getLayerNames()
output_layers = [layer_names.index(layer) for layer in net.getUnconnectedOutLayersNames()]


coco_names_path = "/home/betul/Downloads/darknet-master/cfg/coco.names"
with open("/home/betul/Downloads/darknet-master/cfg/coco.names", "r") as f:
    classes = [line.strip() for line in f]


cap = cv2.VideoCapture("train.mp4")
ret, frame = cap.read()

def mouse_crop(event, x, y, flags, param):
    
    global x_start, y_start, x_end, y_end, cropping, frame, cropped, refPoint
 
    if event == cv2.EVENT_LBUTTONDOWN:
        x_start, y_start, x_end, y_end = x, y, x, y
        cropping = True

    
    elif event == cv2.EVENT_MOUSEMOVE:
        if cropping == True:
            x_end, y_end = x, y

   
    elif event == cv2.EVENT_LBUTTONUP:
        x_end, y_end = x, y
        cropping = False 

        refPoint = [(x_start, y_start), (x_end, y_end)]
    

cv2.namedWindow("frame")
cv2.setMouseCallback("frame", mouse_crop)


while True:
    ret, frame = cap.read()

    if not ret:
        break

    if len(refPoint)== 2:
        try:
            cv2.rectangle(frame, (x_start, y_start), (x_end, y_end), (255, 0, 0), 2)
        except:
            print("Kesilemedi")
            break
            
        

    
   

    height, width, channels = frame.shape

    blob = cv2.dnn.blobFromImage(frame, 0.00392, (416, 416), (0, 0, 0), True, crop=False)
    net.setInput(blob)
    outs = net.forward(output_layers)

   
    dangerous_object_detected = False


    for out in outs:
        for detection in out:
            scores = detection[5:]
            class_id = np.argmax(scores)
            confidence = scores[class_id]
            if confidence > 0.5:
                
                center_x = int(detection[0] * frame.shape[1])
                center_y = int(detection[1] * frame.shape[0])
                w = int(detection[2] * frame.shape[1])
                h = int(detection[3] * frame.shape[0])

                
                x = int(center_x - w / 2)
                y = int(center_y - h / 2)

                
                if x >= (x_start, y_start) and y >= (x_end, y_end) \
                        and x + w <= (x_start, y_start)  + selected_area['width'] \
                        and y + h <= selected_area['y'] + selected_area['height']:
                    dangerous_object_detected = True
                    break 

    
    if dangerous_object_detected:
        cv2.putText(frame, "DANGEROUS", (x_start, y_start), (x_end, y_end) - 10),
        cv2.FONT_HERSHEY_SIMPLEX,(0.5, (0, 0, 255), 2)

  
    cv2.imshow("YOLO Object Detection", frame)

    
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break


cap.release()

cv2.destroyAllWindows()
